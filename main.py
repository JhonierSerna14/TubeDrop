#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
YouTube Downloader - Aplicaci√≥n Principal

Un descargador profesional de videos y playlists de YouTube con interfaz gr√°fica moderna.
Incluye funcionalidades avanzadas como detecci√≥n de duplicados, m√∫ltiples formatos,
configuraci√≥n personalizable y gesti√≥n de descargas.

Funcionalidades principales:
- Descarga de videos individuales y playlists completas
- M√∫ltiples formatos de audio (MP3, FLAC, WAV, M4A, OGG)
- M√∫ltiples formatos de video (MP4, WebM, MKV, AVI)
- Diferentes calidades de descarga
- Interfaz gr√°fica intuitiva y moderna
- Detecci√≥n autom√°tica de archivos duplicados
- Configuraci√≥n personalizable
- Historial de descargas
- Barra de progreso detallada
- Logs de actividad en tiempo real

Autor: YouTube Downloader Team
Versi√≥n: 2.0.0
Fecha: 2025
Licencia: MIT

Dependencias principales:
- yt-dlp: Motor de descarga de YouTube
- tkinter: Interfaz gr√°fica (incluida en Python)
- pathlib: Manejo de rutas (incluida en Python)
- threading: Operaciones as√≠ncronas (incluida en Python)
- json: Manejo de configuraciones (incluida en Python)

Uso:
    python main.py                    # Ejecutar con interfaz gr√°fica
    python main.py --cli <URL>        # Ejecutar en modo l√≠nea de comandos
    python main.py --help            # Mostrar ayuda
"""

import sys
import argparse
import logging
from pathlib import Path

# Configurar la ruta para imports locales
sys.path.insert(0, str(Path(__file__).parent))

try:
    from src.gui.main_window import YouTubeDownloaderGUI
    from src.core.downloader import YouTubeDownloader
    from src.core.config import LOGGING_CONFIG
    from src.utils.helpers import is_valid_youtube_url
    import logging.config
except ImportError as e:
    print(f"‚ùå Error importando m√≥dulos: {e}")
    print("üìã Aseg√∫rate de que todas las dependencias est√©n instaladas:")
    print("   pip install yt-dlp")
    print("   pip install -r requirements.txt")
    sys.exit(1)


def setup_logging():
    """Configurar sistema de logging"""
    try:
        logging.config.dictConfig(LOGGING_CONFIG)
    except Exception:
        # Configuraci√≥n b√°sica si falla la configuraci√≥n avanzada
        logging.basicConfig(
            level=logging.INFO,
            format='%(levelname)s - %(message)s'
        )


def run_cli_mode(url: str, output_format: str = 'mp3', quality: str = '192', output_path: str = None):
    """
    Ejecutar descarga en modo l√≠nea de comandos
    
    Args:
        url (str): URL del video o playlist
        output_format (str): Formato de salida
        quality (str): Calidad de descarga
        output_path (str): Ruta de salida
    """
    print("üéµ YouTube Downloader - Modo L√≠nea de Comandos")
    print("=" * 50)
    
    # Validar URL
    if not is_valid_youtube_url(url):
        print("‚ùå Error: URL no v√°lida de YouTube")
        return False
    
    # Crear instancia del descargador
    downloader = YouTubeDownloader(output_path or "./descargas")
    
    # Configurar callback de progreso simple
    def progress_callback(data):
        if data['status'] == 'downloading':
            print(f"\rüì• Descargando: {data.get('percent', '0%')} - {data.get('speed', '')}", end='', flush=True)
        elif data['status'] == 'finished':
            print(f"\n‚úÖ Completado: {Path(data.get('filename', '')).name}")
    
    downloader.set_progress_callback(progress_callback)
    
    # Obtener informaci√≥n del contenido
    print(f"üìã Obteniendo informaci√≥n: {url}")
    info = downloader.get_video_info(url)
    
    if not info:
        print("‚ùå No se pudo obtener informaci√≥n del contenido")
        return False
    
    # Mostrar informaci√≥n
    if 'entries' in info:
        print(f"üìÇ Playlist detectada: {info.get('title', 'Sin t√≠tulo')}")
        print(f"üìä Videos encontrados: {len(info['entries'])}")
        
        # Descargar playlist
        success = downloader.download_playlist(url, output_format, quality, output_path)
    else:
        print(f"üé¨ Video detectado: {info.get('title', 'Sin t√≠tulo')}")
        print(f"üë§ Canal: {info.get('uploader', 'Desconocido')}")
        
        # Descargar video individual
        success = downloader.download_single_video(url, output_format, quality, output_path)
    
    if success:
        print("\nüéâ ¬°Descarga completada exitosamente!")
        return True
    else:
        print("\n‚ùå Error durante la descarga")
        return False


def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    # Configurar argumentos de l√≠nea de comandos
    parser = argparse.ArgumentParser(
        description='YouTube Downloader - Descargador profesional de videos y playlists',
        epilog='Ejemplos de uso:\n'
               '  python main.py\n'
               '  python main.py --cli "https://youtube.com/watch?v=VIDEO_ID"\n'
               '  python main.py --cli "PLAYLIST_URL" --format mp4 --quality 720p',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument('--cli', metavar='URL', 
                       help='Ejecutar en modo l√≠nea de comandos con la URL especificada')
    parser.add_argument('--format', default='mp3', 
                       help='Formato de salida (mp3, flac, wav, mp4, etc.) [default: mp3]')
    parser.add_argument('--quality', default='192', 
                       help='Calidad de descarga (128, 192, 256, 320, 720p, 1080p, etc.) [default: 192]')
    parser.add_argument('--output', metavar='PATH', 
                       help='Carpeta de destino para las descargas [default: ./descargas]')
    parser.add_argument('--version', action='version', version='YouTube Downloader 2.0.0')
    
    args = parser.parse_args()
    
    # Configurar logging
    setup_logging()
    logger = logging.getLogger('youtube_downloader.main')
    
    try:
        if args.cli:
            # Modo l√≠nea de comandos
            logger.info("Iniciando en modo l√≠nea de comandos")
            success = run_cli_mode(args.cli, args.format, args.quality, args.output)
            sys.exit(0 if success else 1)
        else:
            # Modo interfaz gr√°fica
            logger.info("Iniciando interfaz gr√°fica")
            print("üöÄ Iniciando YouTube Downloader...")
            print("üí° Consejo: Usa --help para ver opciones de l√≠nea de comandos")
            
            app = YouTubeDownloaderGUI()
            app.run()
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Operaci√≥n cancelada por el usuario")
        logger.info("Aplicaci√≥n cancelada por el usuario")
        sys.exit(0)
        
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        logger.error(f"Error inesperado: {e}", exc_info=True)
        sys.exit(1)


if __name__ == "__main__":
    main()
